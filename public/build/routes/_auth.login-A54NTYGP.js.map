{
  "version": 3,
  "sources": ["../../../app/routes/_auth.login.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_auth.login.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_auth.login.tsx\");\n  import.meta.hot.lastModified = \"1738791352214.6218\";\n}\n// REMIX HMR END\n\nimport { redirect } from '@remix-run/node';\nimport { Form } from '@remix-run/react';\nimport { Button } from '~/components/Button';\nimport { TextInput } from '~/components/TextInput';\nexport const loader = async ({\n  request,\n  context\n}) => {\n  const {\n    sessionService\n  } = context;\n  const {\n    playerId\n  } = await sessionService.getPlayerSession(request);\n  // Redirect to home if already logged in\n  if (playerId) {\n    return redirect('/');\n  }\n  return null;\n};\nexport const action = async ({\n  request,\n  context\n}) => {\n  const {\n    playerService,\n    sessionService\n  } = context;\n  const formData = await request.formData();\n  const username = formData.get('username')?.toString();\n  if (!username) {\n    return {\n      error: 'Username is required'\n    };\n  }\n\n  // Check if user exists\n  const existingUser = await playerService.getPlayerByUsername(username);\n  let playerId;\n  if (existingUser.playerId) {\n    playerId = existingUser.playerId;\n  } else {\n    // Create new user\n    const newUser = await playerService.createPlayer(username);\n    playerId = newUser.playerId;\n  }\n\n  // Create session\n  const cookie = await sessionService.createUserSession(playerId);\n  return redirect('/', {\n    headers: {\n      'Set-Cookie': cookie\n    }\n  });\n};\nexport default function Login() {\n  return <div className='flex flex-col items-stretch gap-2 w-full max-w-[800px] p-4 m-auto'>\n      <Form method='post' className='contents'>\n        <TextInput name='username' placeholder='Enter your username' required />\n        <Button variant='secondary' type='submit'>\n          Login\n        </Button>\n      </Form>\n    </div>;\n}\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,kBAAyB;AA0DjB;AA7ER,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,iCAAmC,EAAE;AAAA,EAC9E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAON,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA4B;AAC5B,cAAY,IAAI,eAAe;AACjC;AA0De,SAAR,QAAyB;AAC9B,SAAO,mDAAC,SAAI,WAAU,qEAClB,6DAAC,QAAK,QAAO,QAAO,WAAU,YAC5B;AAAA,uDAAC,aAAU,MAAK,YAAW,aAAY,uBAAsB,UAAQ,QAArE;AAAA;AAAA;AAAA;AAAA,WAAsE;AAAA,IACtE,mDAAC,UAAO,SAAQ,aAAY,MAAK,UAAS,qBAA1C;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,OAJF;AAAA;AAAA;AAAA;AAAA,SAKA,KANG;AAAA;AAAA;AAAA;AAAA,SAOL;AACJ;AACA,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,OAAO;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
