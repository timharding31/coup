{
  "version": 3,
  "sources": ["../../../app/routes/_index.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_index.tsx\");\n  import.meta.hot.lastModified = \"1738358217453.6523\";\n}\n// REMIX HMR END\n\nimport { redirect } from '@remix-run/node';\nimport { Form } from '@remix-run/react';\nexport const meta = () => {\n  return [{\n    title: ''\n  }, {\n    name: 'description',\n    content: ''\n  }];\n};\nexport const loader = async ({\n  request,\n  context\n}) => {\n  const {\n    sessionService\n  } = context;\n  const {\n    playerId\n  } = await sessionService.requirePlayerSession(request);\n  return {\n    playerId\n  };\n};\nexport const action = async ({\n  request,\n  context\n}) => {\n  const {\n    sessionService,\n    gameService\n  } = context;\n  const {\n    playerId\n  } = await sessionService.getPlayerSession(request);\n  if (!playerId) {\n    return null;\n  }\n  const formData = await request.formData();\n  const intent = formData.get('intent');\n  let pin = '';\n  let gameId = null;\n  switch (intent) {\n    case 'create':\n      gameId = (await gameService.createGame(playerId)).gameId;\n      break;\n    case 'join':\n      pin = formData.get('pin')?.toString() || '';\n      if (!pin) {\n        return {\n          error: 'PIN is required'\n        };\n      }\n      gameId = (await gameService.joinGameByPin(playerId, pin.toString())).gameId;\n      break;\n  }\n  if (gameId) {\n    return redirect(`/game/${gameId}`);\n  }\n  return null;\n};\nexport default function Index() {\n  return <div>\n      <Form method='post'>\n        <input type='hidden' name='intent' value='create' />\n        <button type='submit'>Create new game</button>\n      </Form>\n\n      <Form method='post'>\n        <input type='hidden' name='intent' value='join' />\n        <div className='flex gap-2'>\n          <input type='text' name='pin' placeholder='Enter game PIN' required />\n          <button type='submit'>Join game</button>\n        </div>\n      </Form>\n    </div>;\n}\n_c = Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAoBA,kBAAyB;AAgEjB;AAnFR,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,4BAA8B,EAAE;AAAA,EACzE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAON,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAuB;AACvB,cAAY,IAAI,eAAe;AACjC;AAKO,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,GAAG;AAAA,IACD,MAAM;AAAA,IACN,SAAS;AAAA,EACX,CAAC;AACH;AAoDe,SAAR,QAAyB;AAC9B,SAAO,mDAAC,SACJ;AAAA,uDAAC,QAAK,QAAO,QACX;AAAA,yDAAC,WAAM,MAAK,UAAS,MAAK,UAAS,OAAM,YAAzC;AAAA;AAAA;AAAA;AAAA,aAAkD;AAAA,MAClD,mDAAC,YAAO,MAAK,UAAS,+BAAtB;AAAA;AAAA;AAAA;AAAA,aAAqC;AAAA,SAFvC;AAAA;AAAA;AAAA;AAAA,WAGA;AAAA,IAEA,mDAAC,QAAK,QAAO,QACX;AAAA,yDAAC,WAAM,MAAK,UAAS,MAAK,UAAS,OAAM,UAAzC;AAAA;AAAA;AAAA;AAAA,aAAgD;AAAA,MAChD,mDAAC,SAAI,WAAU,cACb;AAAA,2DAAC,WAAM,MAAK,QAAO,MAAK,OAAM,aAAY,kBAAiB,UAAQ,QAAnE;AAAA;AAAA;AAAA;AAAA,eAAoE;AAAA,QACpE,mDAAC,YAAO,MAAK,UAAS,yBAAtB;AAAA;AAAA;AAAA;AAAA,eAA+B;AAAA,WAFjC;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,SALF;AAAA;AAAA;AAAA;AAAA,WAMA;AAAA,OAZG;AAAA;AAAA;AAAA;AAAA,SAaL;AACJ;AACA,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,OAAO;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
